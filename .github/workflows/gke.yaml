# DevOps Pipeline
# See:
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
# for accessing GitHub default variables!

name: GKE pipeline

on:
  push:
    branches:
      - main
    paths:
      # Only trigger if changes occur in these files/dir
      - "**/*.yml"
      - "**/*.yaml"
      - "**/*.py"
      - "**/*.go"
      - "**/Dockerfile"

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  # cluster name
  GKE_CLUSTER: ${{ env.GKE_CLUSTER }}
  # cluster zone
  GKE_ZONE: ${{ env.GKE_ZONE }}
  # image tag based of the "branch.commit-sha"
  # Only a-z, 0-9, _ (underscores), . (periods) and - (hyphens) are allowed.
  # IMAGE_TAG: ${{ github.ref_name || 'default' }}-${{ github.sha }}
  IMAGE_TAG: "latest"
  # artifact registry zone
  GAR_ZONE: ${{ env.GKE_ZONE }}
  # artifact registry repository
  GAR_REPO: ${{ env.GAR_REPO }}
  MONGODB_URI: ${{ secrets.MONGODB_URI }}

jobs:
  main:
    name: main
    runs-on: ubuntu-latest
    environment: production
    # May be needed for "get-gke-credentials" to work:
    permissions:
      contents: "read"
      id-token: "write"

    steps:
    # IMPORTANT!
    # THIS MUST ALWAYS BE FIRST OTHERWISE IT
    # OVERWRITES THE GENERATED KUBECTL FILE.
    # #######################################
    # Required for the "docker build" to work
    # https://github.com/marketplace/actions/checkout
    - name: Checkout
      uses: actions/checkout@v4.2.2


    # Setup gcloud CLI
    # https://github.com/marketplace/actions/authenticate-to-google-cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2.1.8
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}

    # Get the GKE credentials so we can deploy to the cluster
    # https://github.com/marketplace/actions/get-gke-credentials
    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v2.3.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # GitHub Action to login against a Docker registry
    # https://github.com/marketplace/actions/docker-login
    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
        registry: ${{ env.GAR_ZONE }}-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GKE_SA_KEY }}

    # IMPORTANT!
    # Make sure to add the each variable to the CI/CD variables on GitHub.
    - name: Set secrets
      run: |-
        kubectl delete secret gke-secrets || true && \
        kubectl create secret generic gke-secrets --from-literal=mongodb_uri=$MONGODB_URI

    - name: Deploy
      run: |-
        kubectl create -f k8s/mongodb.yaml

    - name: Get pods
      run: |-
        kubectl get pods

    # - name: Get kubectl
    #   run: |-
    #     gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_ZONE

    # - name: Deploy
    #   run: |-

    # # Build the Docker image
    # # -f -> defines where the Dockerfile is located
    # # --tag ...
    # # ...
    # # dir/nextdir -> defines where the build output will be put
    # #                (using the same as the Dockerfile is required if it contains multi-build steps)
    # - name: Build Pypp
    #   run: |-
    #     docker build \
    #       -f ms/pypp/Dockerfile \
    #       --tag "$GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/pypp:$IMAGE_TAG" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       ms/pypp/

    # - name: Publish
    #   run: |-
    #     docker push "$GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/pypp:$IMAGE_TAG"

    # - name: Build Almaz
    #   run: |-
    #     docker build \
    #       -f ms/api/Dockerfile \
    #       --tag "$GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/almaz:$IMAGE_TAG" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       ms/api/

    # # Push the Docker image to Google Container Registry
    # - name: Publish
    #   run: |-
    #     docker push "$GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/almaz:$IMAGE_TAG"
